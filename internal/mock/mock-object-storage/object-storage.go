// Code generated by MockGen. DO NOT EDIT.
// Source: .\pkg\object-storage\object-storage.go

// Package mock_object_storage is a generated GoMock package.
package mock_object_storage

import (
	context "context"
	reflect "reflect"

	client "github.com/dapr/go-sdk/client"
	gomock "github.com/golang/mock/gomock"
)

// MockBindingProxy is a mock of BindingProxy interface.
type MockBindingProxy struct {
	ctrl     *gomock.Controller
	recorder *MockBindingProxyMockRecorder
}

// MockBindingProxyMockRecorder is the mock recorder for MockBindingProxy.
type MockBindingProxyMockRecorder struct {
	mock *MockBindingProxy
}

// NewMockBindingProxy creates a new mock instance.
func NewMockBindingProxy(ctrl *gomock.Controller) *MockBindingProxy {
	mock := &MockBindingProxy{ctrl: ctrl}
	mock.recorder = &MockBindingProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBindingProxy) EXPECT() *MockBindingProxyMockRecorder {
	return m.recorder
}

// InvokeBinding mocks base method.
func (m *MockBindingProxy) InvokeBinding(ctx context.Context, in *client.InvokeBindingRequest) (*client.BindingEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvokeBinding", ctx, in)
	ret0, _ := ret[0].(*client.BindingEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeBinding indicates an expected call of InvokeBinding.
func (mr *MockBindingProxyMockRecorder) InvokeBinding(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeBinding", reflect.TypeOf((*MockBindingProxy)(nil).InvokeBinding), ctx, in)
}
